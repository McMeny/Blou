if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = Snip_copytool()
    window.show()
    app.aboutToQuit.connect(app.deleteLater)
    sys.exit(app.exec_())

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = Snip_copytool()
    window.show()
    app.aboutToQuit.connect(app.deleteLater)
    sys.exit(app.exec_())

  class scan_doc(QtWidgets.QWidget):
      fle = filedialog.askopenfilename(initialdir = 'C:/gui/', title = 'Open File', filetypes = (('text files', '*.txt'), ('HTML Files', '*html'), ('Python files', '*,py'), ('All files', '*.*')))
      text = pytesseract.image_to_string(fle)
      print(text)
      pc.copy(text)
      pop_up = Toplevel(root)
      pop_up.geometry('200x60')
      pop_up.resizable(False, False)
      pop_up.title('Notification')
      popup_label = Label(pop_up, text = 'Text copied to clipboard!', font = font.Font(family = 'MS Shell Dlg 2', size = 8))
      popup_label.place(x = 40, y = 10)
      ok_btn = Button(pop_up, text = 'Ok', command = pop_up.destroy)
      ok_btn.place(x = 80, y = 30)
      print('no')

-------------------------------------------------------------------------------------
  from PyQt5 import QtWidgets
  import sys
  class Window(QtWidgets.QDialog):
      def __init__(self):
          super().__init__()
          self.layout = QtWidgets.QHBoxLayout(self)
          self.btn1 = QtWidgets.QPushButton('Button 1')
          self.layout.addWidget(self.btn1)
          self.btn2 = QtWidgets.QPushButton('Button 2')
          self.layout.addWidget(self.btn2)
  app = QtWidgets.QApplication(sys.argv)
  win = Window()
  win.show()
  sys.exit(app.exec())
-------------------------------------------------------------------------------------
  def main():
      root = Tk()
      w = IntVar()
      w.set(0)
      photo = PhotoImage(file = 'snipocrlogo.png')
      root.iconphoto(False, photo)
      root.title('SnipOCR')
      root.geometry('400x55')
      canvas = Canvas(root, width = 451, height = 238, highlightthickness = 0)
      canvas.grid(columnspan = 100, rowspan = 100)
      root.resizable(False, False)

      fcolor = '#666666'
      bcolor = '#ffffff'

      snip_btn = Button(root, width = 10, height = 2, text = 'Snip', font = font.Font(family = 'MS Shell Dlg 2', size = 8), borderwidth = 0,
      fg = bcolor,
      bg = fcolor,
      border = 0,
      activeforeground = fcolor,
      activebackground = bcolor,
      command = Snip_tool)

      def snipbutton():
          def on_enter(e):
              snip_btn['background'] = bcolor
              snip_btn['foreground'] = fcolor

          def on_leave(e):
              if w.get() == 0:
                  snip_btn['background'] = fcolor
                  snip_btn['foreground'] = bcolor
              if w.get() == 1:
                  snip_btn['background'] = 'ededed'
                  snip_btn['foreground'] = '#303030'

          snip_btn.bind('<Enter>', on_enter)
          snip_btn.bind('<Leave>', on_leave)

          snip_btn.place(x = 10, y = 10)

      snipbutton()

      snip_copy_btn = Button(root, width = 15, height = 2, text = 'Snip & Copy Text', font = font.Font(family = 'MS Shell Dlg 2', size = 8), borderwidth = 0,
      fg = bcolor,
      bg = fcolor,
      border = 0,
      activeforeground = fcolor,
      activebackground = bcolor,
      command = Snip_copytool)

      def snip_copy_button():
          def on_enter(e):
              snip_copy_btn['background'] = bcolor
              snip_copy_btn['foreground'] = fcolor

          def on_leave(e):
              if w.get() == 0:
                  snip_copy_btn['background'] = fcolor
                  snip_copy_btn['foreground'] = bcolor
              if w.get() == 1:
                  snip_copy_btn['background'] = 'ededed'
                  snip_copy_btn['foreground'] = '#303030'

          snip_copy_btn.bind('<Enter>', on_enter)
          snip_copy_btn.bind('<Leave>', on_leave)

          snip_copy_btn.place(x = 80, y = 10)

      snip_copy_button()

      scan_btn = Button(root, width = 20, height = 2, text = 'Convert image to text', font = font.Font(family = 'MS Shell Dlg 2', size = 8), borderwidth = 0,
      fg = bcolor,
      bg = fcolor,
      border = 0,
      activeforeground = fcolor,
      activebackground = bcolor,
      command = scan_upload)

      def scan_button():
          def on_enter(e):
              scan_btn['background'] = bcolor
              scan_btn['foreground'] = fcolor

          def on_leave(e):
              if w.get() == 0:
                  scan_btn['background'] = fcolor
                  scan_btn['foreground'] = bcolor
              if w.get() == 1:
                  scan_btn['background'] = 'ededed'
                  scan_btn['foreground'] = '#303030'

          scan_btn.bind('<Enter>', on_enter)
          scan_btn.bind('<Leave>', on_leave)

          scan_btn.place(x = 180, y = 10)

      scan_button()

      scan_to_search_btn = Button(root, width = 13, height = 2, text = 'Snip and search', font = font.Font(family = 'MS Shell Dlg 2', size = 8), borderwidth = 0,
      fg = bcolor,
      bg = fcolor,
      border = 0,
      activeforeground = fcolor,
      activebackground = bcolor,
      command = scan_to_search)

      def scan_search_button():
          def on_enter(e):
              scan_to_search_btn['background'] = bcolor
              scan_to_search_btn['foreground'] = fcolor

          def on_leave(e):
              if w.get() == 0:
                  scan_to_search_btn['background'] = fcolor
                  scan_to_search_btn['foreground'] = bcolor
              if w.get() == 1:
                  scan_to_search_btn['background'] = 'ededed'
                  scan_to_search_btn['foreground'] = '#303030'

          scan_to_search_btn.bind('<Enter>', on_enter)
          scan_to_search_btn.bind('<Leave>', on_leave)

          scan_to_search_btn.place(x = 310, y = 10)

      scan_search_button()

  if __name__ == '__main__':
      main()

  mainloop()
-------------------------------------------------------------------------------------
  class Form(QDialog):
     def __init__(self, parent=None):
        super(Form, self).__init__(parent)

        layout = QVBoxLayout()
        self.b1 = QPushButton("Button1")
        self.b1.setCheckable(True)
        self.b1.toggle()
        self.b1.clicked.connect(lambda:self.whichbtn(self.b1))
        self.b1.clicked.connect(self.btnstate)
        layout.addWidget(self.b1)

        self.b2 = QPushButton()
        self.b2.setIcon(QIcon(QPixmap("python.gif")))
        self.b2.clicked.connect(lambda:self.whichbtn(self.b2))
        layout.addWidget(self.b2)
        self.setLayout(layout)
        self.b3 = QPushButton("Disabled")
        self.b3.setEnabled(False)
        layout.addWidget(self.b3)

        self.b4 = QPushButton("&Default")
        self.b4.setDefault(True)
        self.b4.clicked.connect(lambda:self.whichbtn(self.b4))
        layout.addWidget(self.b4)

        self.setWindowTitle("Button demo")

     def btnstate(self):
        if self.b1.isChecked():
           print('button pressed')
        else:
           print('button released')

     def whichbtn(self,b):
        print('clicked button is ') +b.text()

  def main():
     app = QApplication(sys.argv)
     ex = Form()
     ex.show()
     sys.exit(app.exec_())

  if __name__ == '__main__':
     main()
-------------------------------------------------------------------------------------
     if img_array is not None and snip_number is not None:
             self.image = self.convert_numpy_img_to_qpixmap(numpy_image)
             self.change_and_set_title("Snip #{0}".format(snip_number))
         else:
             self.image = QPixmap("background.PNG")
             self.change_and_set_title(Menu.default_title)
